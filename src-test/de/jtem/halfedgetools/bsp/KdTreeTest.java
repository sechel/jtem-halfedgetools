package de.jtem.halfedgetools.bsp;import java.util.Collection;import org.junit.Assert;import org.junit.Test;import de.jtem.halfedgetools.adapter.AdapterSet;import de.jtem.halfedgetools.jreality.adapter.JRPositionAdapter;import de.jtem.halfedgetools.jreality.node.DefaultJREdge;import de.jtem.halfedgetools.jreality.node.DefaultJRFace;import de.jtem.halfedgetools.jreality.node.DefaultJRHDS;import de.jtem.halfedgetools.jreality.node.DefaultJRVertex;public class KdTreeTest {	@Test	public void equalLocationBugTest() throws Exception {		DefaultJRHDS hds = new DefaultJRHDS();		DefaultJRVertex v1 = hds.addNewVertex();		DefaultJRVertex v2 = hds.addNewVertex();		DefaultJRVertex v3 = hds.addNewVertex();		v1.position = new double[]{-10,-10, 0};		v2.position = new double[]{-10,-10, 0};		v3.position = new double[]{2, 0, 0};		AdapterSet a = AdapterSet.createGenericAdapters();		a.add(new JRPositionAdapter());		KdTree<DefaultJRVertex, DefaultJREdge, DefaultJRFace> kd = new KdTree<DefaultJRVertex, DefaultJREdge, DefaultJRFace>(hds, a, 10, false);		Collection<DefaultJRVertex> result = kd.collectKNearest(v1.position, 2);		Assert.assertEquals("not enough vertices found", 2, result.size());		Assert.assertTrue("vertex at the same location as query not found", result.contains(v1));		Assert.assertTrue("vertex at the same location as query not found", result.contains(v2));		Assert.assertTrue("result contains wrong vertex", !result.contains(v3));	}	}